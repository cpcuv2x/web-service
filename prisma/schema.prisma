// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String             @id @default(uuid())
  username                    String             @unique
  password                    String
  role                        UserRole
  Dashboard                   Dashboard[]
  NotificationAcknowledgement NotificationRead[]
  Driver                      Driver?
}

model Car {
  id                 String               @id @default(dbgenerated("CONCAT('V', LPAD(nextval('serialV')::text, 4, '0'))"))
  licensePlate       String               @unique
  model              String
  imageFilename      String
  status             CarStatus
  passengers         Int
  lat                Float
  long               Float
  Driver             Driver?              @relation(fields: [driverId], references: [id])
  driverId           String?              @unique
  AccidentLog        AccidentLog[]
  Camera             Camera[]
  Module             Module[]
  EcrLog             EcrLog[]
  DrowsinessAlarmLog DrowsinessAlarmLog[]
  timestamp          DateTime             @default(now())
}

model Driver {
  User                User                 @relation(fields: [userId], references: [id])
  userId              String               @unique() @default(uuid())
  id                  String               @id @default(dbgenerated("CONCAT('D', LPAD(nextval('serialD')::text, 4, '0'))"))
  firstNameTH         String
  lastNameTH          String
  firstNameEN         String
  lastNameEN          String
  gender              Gender
  birthDate           DateTime
  registerDate        DateTime
  nationalId          String               @unique
  carDrivingLicenseId String               @unique
  status              DriverStatus
  imageFilename       String
  AccidentLog         AccidentLog[]
  EcrLog              EcrLog[]
  Car                 Car?
  DrowsinessAlarmLog  DrowsinessAlarmLog[]
  ecr                 Float                @default(0)
  ecrThreshold        Float                @default(0)
  timestamp           DateTime             @default(now())
}

model Camera {
  id          String       @id @default(dbgenerated("CONCAT('C', LPAD(nextval('serialC')::text, 4, '0'))"))
  name        String
  description String
  streamUrl   String?
  Car         Car?         @relation(fields: [carId], references: [id])
  carId       String?
  role        CameraRole
  status      CameraStatus
  timestamp   DateTime     @default(now())

  @@unique([carId, role])
}

model Dashboard {
  id         String                          @id @default(uuid())
  name       String
  default    Boolean
  user       User                            @relation(fields: [userId], references: [id])
  userId     String
  components DashboardComponentAssociation[]
}

model DashboardComponent {
  id         String                          @id @default(uuid())
  type       String
  dashboards DashboardComponentAssociation[]
}

model DashboardComponentAssociation {
  id                   String              @id @default(uuid())
  x                    Int
  y                    Int
  w                    Int
  h                    Int
  configuration        String
  Dashboard            Dashboard?          @relation(fields: [dashboardId], references: [id])
  dashboardId          String?
  DashboardComponent   DashboardComponent? @relation(fields: [dashboardComponentId], references: [id])
  dashboardComponentId String?
}

model Notification {
  id                          String             @id @default(uuid())
  type                        NotificationType
  message                     String
  timestamp                   DateTime
  jsonMetadata                String
  NotificationAcknowledgement NotificationRead[]
}

model NotificationRead {
  id             String        @id @default(uuid())
  User           User?         @relation(fields: [userId], references: [id])
  userId         String?
  Notification   Notification? @relation(fields: [notificationId], references: [id])
  notificationId String?
  read           Boolean
}

model AccidentLog {
  id        String   @id @default(uuid())
  Car       Car?     @relation(fields: [carId], references: [id])
  carId     String?
  Driver    Driver?  @relation(fields: [driverId], references: [id])
  driverId  String?
  timestamp DateTime
  lat       Float
  long      Float
}

model EcrLog {
  id       String   @id @default(uuid())
  start    DateTime
  end      DateTime
  Car      Car      @relation(fields: [carId], references: [id])
  carId    String
  Driver   Driver   @relation(fields: [driverId], references: [id])
  driverId String
  value    Float

  @@index([start, end, carId, driverId])
}

model DrowsinessAlarmLog {
  id           String   @id @default(uuid())
  Car          Car?     @relation(fields: [carId], references: [id])
  carId        String?
  Driver       Driver?  @relation(fields: [driverId], references: [id])
  driverId     String?
  responseTime Float
  lat          Float
  long         Float
  timestamp    DateTime
}

model Module {
  carId     String
  role      ModuleRole
  car       Car          @relation(fields: [carId], references: [id])
  status    ModuleStatus
  timestamp DateTime     @default(now())

  @@id([carId, role])
}

enum UserRole {
  ADMIN
  DRIVER
}

enum CarStatus {
  ACTIVE
  INACTIVE
}

enum DriverStatus {
  ACTIVE
  INACTIVE
}

enum CameraStatus {
  ACTIVE
  INACTIVE
}

enum ModuleStatus {
  ACTIVE
  INACTIVE
}

enum NotificationType {
  ACCIDENT
  DROWSINESS
}

enum CameraRole {
  DRIVER
  DOOR
  SEATS_FRONT
  SEATS_BACK
}

enum ModuleRole {
  DROWSINESS_MODULE
  ACCIDENT_MODULE
}

enum Gender {
  MALE
  FEMALE
  NOT_SPECIFIED
}
